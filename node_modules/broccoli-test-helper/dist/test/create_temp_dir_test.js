"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = require("fs");
const index_1 = require("../index");
describe("createTempDir", () => {
    let subject;
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        subject = yield index_1.createTempDir();
    }));
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        yield subject.dispose();
    }));
    it("should support writing", () => {
        subject.write({
            "file.txt": "hello world",
            "lib": {}
        });
        chai_1.expect(fs.readdirSync(subject.path())).to.deep.equal(["file.txt", "lib"]);
        chai_1.expect(fs.readFileSync(subject.path("file.txt"), "utf8")).to.equal("hello world");
        subject.write({
            "more.txt": "another"
        }, "lib");
        chai_1.expect(fs.readFileSync(subject.path("lib/more.txt"), "utf8")).to.equal("another");
        subject.write({
            // tslint:disable-next-line object-literal-key-quotes
            "lib": null
        });
        chai_1.expect(fs.readdirSync(subject.path())).to.deep.equal(["file.txt"]);
    });
    it("should support reading", () => {
        fs.writeFileSync(subject.path("file.txt"), "hello world");
        fs.mkdirSync(subject.path("lib"));
        fs.writeFileSync(subject.path("lib/more.txt"), "another");
        chai_1.expect(subject.read()).to.deep.equal({
            "file.txt": "hello world",
            "lib": {
                "more.txt": "another"
            }
        });
        chai_1.expect(subject.read("lib")).to.deep.equal({
            "more.txt": "another"
        });
    });
    it("should support copy from fixture path", () => {
        subject.copy("test/fixtures/a");
        chai_1.expect(fs.readdirSync(subject.path())).to.deep.equal(["index.js", "lib"]);
        chai_1.expect(fs.readFileSync(subject.path("index.js"), "utf8")).to.equal("export * from \"./lib/a\";\n");
        chai_1.expect(fs.readdirSync(subject.path("lib"))).to.deep.equal(["a.js"]);
        chai_1.expect(fs.readFileSync(subject.path("lib/a.js"), "utf8")).to.equal("export class A {}\n");
        subject.copy("test/fixtures/a", "lib");
        chai_1.expect(fs.readdirSync(subject.path("lib"))).to.deep.equal(["a.js", "index.js", "lib"]);
        chai_1.expect(fs.readFileSync(subject.path("lib/index.js"), "utf8")).to.equal("export * from \"./lib/a\";\n");
        chai_1.expect(fs.readdirSync(subject.path("lib/lib"))).to.deep.equal(["a.js"]);
        chai_1.expect(fs.readFileSync(subject.path("lib/lib/a.js"), "utf8")).to.equal("export class A {}\n");
    });
    it("should remove tmp dir on dispose", () => __awaiter(this, void 0, void 0, function* () {
        yield subject.dispose();
        chai_1.expect(() => {
            subject.read();
        }).to.throw(/ENOENT/);
    }));
});
//# sourceMappingURL=create_temp_dir_test.js.map